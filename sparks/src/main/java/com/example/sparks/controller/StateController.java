package com.example.sparks.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.example.sparks.Entities.State;
import com.example.sparks.Repositories.StateRepository;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/state") // This means URL's start with /state (after Application path)
@CrossOrigin
public class StateController {
    @Autowired // This means to get the bean called stateRepository
            // Which is auto-generated by Spring, we will use it to handle the data
    private StateRepository stateRepository;

    @PostMapping(path="/add-test-state") // Map ONLY POST Requests
    public @ResponseBody String addTestState(HttpServletRequest request) {
        State s = new State();

        // dummy data
        JSONObject testGeoJson = new JSONObject();
        testGeoJson.put("value1", 1);
        JSONObject temp = new JSONObject();
        int[] tempArray = {1, 2, 3};
        temp.put("array", tempArray);
        testGeoJson.put("value2", temp);

        s.setGeoJson(testGeoJson.toString());
        s.setStateCode("NV");

        stateRepository.save(s);

        // confirmation message sent to requester
        return "Saved Test State";
    }

    @GetMapping(path="/{stateCode}")
    public @ResponseBody State getStateByCode(@PathVariable String stateCode) {
        List<State> states = stateRepository.findByStateCode(stateCode);

        // stateCode is a unique field so just return 1 state object
        return states.get(0);
    }

    @GetMapping(path="/session")
    public @ResponseBody String getStateFromSession(@RequestBody String stateCode) {

        return stateCode;
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<State> getAllStates() {
        // This returns a JSON with the states
        return stateRepository.findAll();
    }
}