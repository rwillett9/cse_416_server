package com.example.sparks.controller;

import java.util.HashMap;
import java.util.List;

import com.example.sparks.Entities.DistrictPlan;
import com.example.sparks.Entities.DistrictPlanMetrics;
import com.example.sparks.Entities.SeatShareData;
import com.example.sparks.Entities.State;
import com.example.sparks.Entities.StateSummary;
import com.example.sparks.Repositories.StateRepository;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/state") // This means URL's start with /state (after Application path)
@CrossOrigin
public class StateController {
    @Autowired // This means to get the bean called stateRepository
            // Which is auto-generated by Spring, we will use it to handle the data
    private StateRepository stateRepository;

    // @TODO: delete this
    @PostMapping(path="/add-test-state") // Map ONLY POST Requests
    public @ResponseBody String addTestState() {
        State s = new State();

        // dummy data
        JSONObject testGeoJson = new JSONObject();
        testGeoJson.put("value1", 1);
        JSONObject temp = new JSONObject();
        int[] tempArray = {1, 2, 3};
        temp.put("array", tempArray);
        testGeoJson.put("value2", temp);

        s.setGeoJson(testGeoJson.toString());
        s.setStateCode("NV");

        stateRepository.save(s);

        // confirmation message sent to requester
        return "Saved Test State";
    }

    // @TODO: should return StateSummary intstead of entire state
    @GetMapping(path="/{stateCode}")
    public @ResponseBody StateSummary getStateByCode(@PathVariable String stateCode) {
        State state = stateRepository.findByStateCode(stateCode).get(0);

        // populate StateSummary Object to be returned
        StateSummary summary = new StateSummary();
        HashMap<Long, String> map = new HashMap<Long, String>();
        for (DistrictPlan plan: state.getDistrictPlans()) {
            map.put(plan.getId(), plan.getName());
        }
        summary.setDistrictPlanIdToNameMap(map);

        return summary;
    }

    // @TODO: delete this
    @GetMapping(path="/session")
    public @ResponseBody String getStateFromSession(@RequestBody String stateCode) {

        return stateCode;
    }

    // @TODO: maybe returns geojson with statecode?
    @GetMapping(path="/all")
    public @ResponseBody Iterable<State> getAllStates() {
        // This returns a JSON with the states
        return stateRepository.findAll();
    }


    // @TODO: DISTRICT ENDPOINT
    // get seat share data using statecode and district plan id
    @GetMapping(path="/district/seat-share/{districtPlanId}")
    public @ResponseBody SeatShareData getSeatShareData(@RequestBody String stateCode, @PathVariable Long districtPlanId) {
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);
        
        // populate SeatShareData Object to be returned
        SeatShareData seatShareData = new SeatShareData();
        seatShareData.setBiasAt50(districtPlan.getSeatShareBiasAt50());
        seatShareData.setDemocratData(districtPlan.getSeatShareDemocratData());
        seatShareData.setRepublicanData(districtPlan.getSeatShareRepublicanData());
        seatShareData.setResponsiveness(districtPlan.getSeatShareResponsivness());
        seatShareData.setSymmetry(districtPlan.getSeatShareSymmetry());

        return seatShareData;
    }

    // @TODO: DISTRICT ENDPOINT
    // get district stats by statecode and district plan id
    @GetMapping(path="/district/{districtPlanId}")
    public @ResponseBody DistrictPlanMetrics getDistrictSummary(@RequestBody String stateCode, @PathVariable Long districtPlanId) {
        // @TODO
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);

        // populate DistrictPlanMetrics Object to be returned
        DistrictPlanMetrics metrics = new DistrictPlanMetrics();
        metrics.setCompactness(districtPlan.getCompactness());
        metrics.setCompetitiveDistrictIds(districtPlan.getCompetitiveDistrictIds());
        metrics.setDemocratDistrictIds(districtPlan.getDemocratDistrictIds());
        metrics.setMeanPopulationDeviation(districtPlan.getMeanPopulationDeviation());
        metrics.setNumMinorityMajorityDistricts(districtPlan.getNumMinorityMajorityDistricts());
        metrics.setRepublicanDistrictIds(districtPlan.getRepublicanDistrictIds());
        metrics.setName(districtPlan.getName());

        return metrics;
    }

}