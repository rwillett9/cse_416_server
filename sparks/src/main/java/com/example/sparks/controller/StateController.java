package com.example.sparks.controller;

import java.util.ArrayList;
import java.util.List;

import com.example.sparks.entity.DistrictPlan;
import com.example.sparks.entity.State;
import com.example.sparks.nonentity.DistrictPlanMetrics;
import com.example.sparks.nonentity.SeatShareData;
import com.example.sparks.nonentity.StateSummary;
import com.example.sparks.repository.StateRepository;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/state") // This means URL's start with /state (after Application path)
@CrossOrigin
public class StateController {
    @Autowired // This means to get the bean called stateRepository
            // Which is auto-generated by Spring, we will use it to handle the data
    private StateRepository stateRepository;

    /**
     * "/state/{stateCode}"
     * @param stateCode two letter String representation of the requested state
     * @return StateSummary object with data to be displayed by the frontend GUI
     */
    @GetMapping(path="/{stateCode}")
    public @ResponseBody StateSummary getStateByCode(@PathVariable String stateCode) {
        State state = stateRepository.findByStateCode(stateCode).get(0);

        // populate StateSummary Object to be returned
        StateSummary summary = new StateSummary();
        List<DistrictPlanMetrics> metrics = new ArrayList<DistrictPlanMetrics>();
        for (DistrictPlan plan: state.getDistrictPlans()) {
            metrics.add(plan.createMetrics());
        }
        summary.setDistrictPlanMetricsList(metrics);

        return summary;
    }

    // @TODO: maybe returns geojson with statecode?
    @GetMapping(path="/all")
    public @ResponseBody Iterable<State> getAllStates() {
        // This returns a JSON with the states
        return stateRepository.findAll();
    }


    // @TODO: DISTRICT ENDPOINT
    // get seat share data using statecode and district plan id
    @GetMapping(path="/district/seat-share/{stateCode}/{districtPlanId}")
    public @ResponseBody SeatShareData getSeatShareData(@PathVariable Long districtPlanId, 
                                                        @PathVariable String stateCode) {
        // List<State> states = stateRepository.findByStateCode(values.getFirst("stateCode"));
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);

        return districtPlan.createSeatShare();
    }

    // @TODO: DISTRICT ENDPOINT
    // get district stats by statecode and district plan id
    @GetMapping(path="/district/{stateCode}/{districtPlanId}")
    public @ResponseBody DistrictPlanMetrics getDistrictSummary(@PathVariable Long districtPlanId, 
                                                                @PathVariable String stateCode) {
        // @TODO
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);

        return districtPlan.createMetrics();
    }

}