package com.example.sparks.controller;

import java.util.ArrayList;
import java.util.List;

import com.example.sparks.entity.DistrictPlan;
import com.example.sparks.entity.State;
import com.example.sparks.nonentity.BoxAndWhiskerResponse;
import com.example.sparks.nonentity.DistrictPlanMetrics;
import com.example.sparks.nonentity.SeatShareData;
import com.example.sparks.nonentity.SeawulfRawData;
import com.example.sparks.nonentity.SeawulfSummary;
import com.example.sparks.nonentity.StateSummary;
import com.example.sparks.repository.DistrictPlanRepository;
import com.example.sparks.repository.DistrictRepository;
import com.example.sparks.repository.PrecinctRepository;
import com.example.sparks.repository.StateRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
// @RequestMapping(path="/state") // This means URL's start with /state (after Application path)
@CrossOrigin
public class StateController {
    @Autowired // This means to get the bean called stateRepository
            // Which is auto-generated by Spring, we will use it to handle the data
    private StateRepository stateRepository;

    // @TODO unsure if we need these
    // @Autowired
    // private DistrictPlanRepository districtPlanRepository;

    // @Autowired
    // private DistrictRepository districtRepository;

    // @Autowired
    // private PrecinctRepository precinctRepository;

    /**
     * "/state/{stateCode}"
     * @param stateCode two letter String representation of the requested state
     * @return StateSummary object with data to be displayed by the frontend GUI
     */
    @GetMapping(path="/state/{stateCode}")
    public @ResponseBody StateSummary getStateByCode(@PathVariable String stateCode) {
        State state = stateRepository.findByStateCode(stateCode).get(0);

        // populate StateSummary Object to be returned
        StateSummary summary = new StateSummary();
        List<DistrictPlanMetrics> metrics = new ArrayList<DistrictPlanMetrics>();
        for (DistrictPlan plan: state.getDistrictPlans()) {
            metrics.add(plan.createMetrics());
        }
        summary.setDistrictPlanMetricsList(metrics);

        return summary;
    }

    // get seat share data using statecode and district plan id
    @GetMapping(path="/district/seat-share/{stateCode}/{districtPlanId}")
    public @ResponseBody SeatShareData getSeatShareData(@PathVariable Long districtPlanId, 
                                                        @PathVariable String stateCode) {
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);

        return districtPlan.generateSeatShareData();
    }

    // get district stats by statecode and district plan id
    @GetMapping(path="/district/{stateCode}/{districtPlanId}")
    public @ResponseBody DistrictPlanMetrics getDistrictSummary(@PathVariable Long districtPlanId, 
                                                                @PathVariable String stateCode) {
        // @TODO
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);

        return districtPlan.createMetrics();
    }

    // get box and whisker data needed
    @GetMapping(path="/district/box-whisker/{stateCode}/{districtPlanId}")
    public @ResponseBody BoxAndWhiskerResponse getBoxAndWhisker(@PathVariable String stateCode,
                                                                @PathVariable Long districtPlanId) {
        // @TODO
        State state = stateRepository.findByStateCode(stateCode).get(0);
        DistrictPlan districtPlan = state.getDistrictPlanById(districtPlanId);

        BoxAndWhiskerResponse response = new BoxAndWhiskerResponse();
        response.setDistrictData(districtPlan.generateBoxAndWhiskerData());
        response.setBoxAndWhiskerData(state.createSeawulfBoxAndWhiskerMap());
        return response;
    }











    // TESTING ENDPOINTS

    // @TODO: maybe returns geojson with statecode?
    @GetMapping(path="/state/all")
    public @ResponseBody Iterable<State> getAllStates() {
        // This returns a JSON with the states
        return stateRepository.findAll();
    }

    // @TODO testing purposes only
    @PostMapping(path="/add-test-data")
    public @ResponseBody State addTestMinorityDistricts() {
        // State s = stateRepository.findByStateCode("NV").get(0);

        // List<BoxAndWhiskerMap> mapList = new ArrayList<BoxAndWhiskerMap>();
        // BoxAndWhiskerMap map1 = new BoxAndWhiskerMap();
        // map1.setPoliticalGroup(PoliticalGroup.DEMOCRAT);
        // map1.setMinimum(1);
        // map1.setLowerQuartile(2);
        // map1.setMedian(3);
        // map1.setUpperQuartile(4);
        // map1.setMaximum(5);
        // BoxAndWhiskerMap map2 = new BoxAndWhiskerMap();
        // map2.setPoliticalGroup(PoliticalGroup.REPUBLICAN);
        // map2.setMinimum(6);
        // map2.setLowerQuartile(7);
        // map2.setMedian(8);
        // map2.setUpperQuartile(9);
        // map2.setMaximum(10);
        // mapList.add(map1);
        // mapList.add(map2);

        // s.setSeawulfBoxAndWhiskerMap(mapList);

        State s = new State();
        s.setId(5L);
        s.setStateCode("NV");
        s.setGeoJson("nevada_geojson.json");
        stateRepository.save(s);

        return s;
    }

    // @TODO testing
    @GetMapping(path="/test-district")
    public @ResponseBody DistrictPlan getTestDistrict() {
        State s = stateRepository.findByStateCode("NV").get(0);
        DistrictPlan p = s.getDistrictPlanById(0L);
        return p;
    }

    // @TODO testing
    @GetMapping(path="/test-state-seawulf-summary")
    public @ResponseBody SeawulfSummary getTestStateSeawulfSummary() {
        return stateRepository.findByStateCode("NV").get(0).createSeawulfSummary();
    }

    // @TODO testing
    @GetMapping(path="/test-state-seawulf-raw")
    public @ResponseBody SeawulfRawData getTestStateSeawulfRawData() {
        return stateRepository.findByStateCode("NV").get(0).createSeawulfRawData();
    }



    // @TODO FOR ADDING DATA
    @PostMapping(path="/add")
    public @ResponseBody String addState(@RequestBody @Validated State state) {
        // for (DistrictPlan districtPlan: state.getDistrictPlans()) {
        //     for (District district: districtPlan.getDistricts()) {
        //         for (int i = 0; i < district.getPrecincts().size(); i++) {
        //             Precinct precinct = district.getPrecincts().get(i);
        //             // if new precinct, save it
        //             List<Precinct> precincts = precinctRepository.findAllByNameIgnoreCase(precinct.getName());
        //             if (precincts.size() == 0) {
        //                 precinctRepository.save(precinct);
        //             } else {
        //                 // point it at the precinct in the database
        //                 Precinct temp = precincts.get(0);
        //             }
        //         }
        //     }
        // }

        // save state in the database
        stateRepository.save(state);
        return "Saved State";
    }

    // @TODO for testing
    @PostMapping(path="/add-test")
    public @ResponseBody String addStateTest(@RequestBody State state) {
        return "done";
    }

}